##### Application configuration #####
app:
  #Config for customer requirements
  customer:
    #Information of the parking site (to associate data with). site_key is the password to authenticate
    
    #
    # Use the following to retrieve the information from the environment variables
    # site_id: !env SITE_ID    #Load id from environment variable
    # site_key: !env SITE_KEY  #Load key from environment variable
    #
    site_id: 0
    site_key: secret
    
    #All connected cameras
    cameras:
      - webcam:
          src: 0

      - camera1:
          #Hint at what type of camera it is
          kind: ipcamera

          src: rtsp://admin:@192.168.0.20:80/ch0_0.264

          protocol: rtsp
          authentication:
            username: admin
            password: 
          stream_path: /ch0_0.264

      - prerecorded: &primary_camera
          #Hint at what type of camera is being pointed
          kind: media
          #Which camera device to use (index, path or url of stream)
          src: 0
          #Skip beginning x number of frames in case there is no activity there
          skip_frames: 0
          #Slow down footage (frame rate cap) to make demo easier to view
          throttle_fps: 16

  #Conenction to backend API for database and history data APIs
  #This API will require authentication using `site_id` and `site_key` (defined above)
  #in order to accept the requests
  api:
    api_base: http://192.168.0.9:5000/
    ws_base: ws://localhost:5000/

  #Task configuration
  #These tasks will run along with the application to perform
  #any processing task, such as vehicle tracking, communication
  tasks:
    camera_source:
      type: CameraSource
      properties:
        <<: *primary_camera

    vehicle_tracker:
      type: ObjectTracker
      properties:
        input_source: camera_source
        output: vidstream_main
        detection_output: vehicle_manager

        #How many frames to pass to tracker per second
        update_rate: 30

        #ROI tracker configuration
        tracker:
          # Check out the 'motrackers' library to find out which trackers are supported
          type: SORT
          #Number of detection frames till lost
          max_lost: 10
          iou_threshold: 0.55
          #Steady update rate
          update_rate: 60
        
    #Sends detections found in the video input to the tracker
    vehicle_detector:
      type: RemoteObjectDetector
      properties:
        input_source: camera_source
        #Which detection model to use
        model: vehicle_yolov5
        output: vehicle_tracker
        #Lower resolutions will be faster to process (less bandwidth) but will have less precision
        #and accuracy than full-size frame. Size of 640 is default (YOLOv5 frame size)
        process_size: 360
        #Image encoding
        img_format: .png
        #Endpoint of the server API to use for detection
        #server_endpoint: !env MODEL_SERVER
        server_endpoint: http://localhost:5000/

    license_plate_decoder:
      type: vehiclebot.components.plate.PlateRecognizer
      properties:
        #Endpoint of the server API to use for plate recognition
        #server_endpoint: !env MODEL_SERVER
        server_endpoint: http://localhost:5000/

    #To gather all detections, associate them with a vehicle number and generate entry/exit timestamps
    vehicle_manager:
      type: vehiclebot.components.rtc.rtcprocess.RTCDataProcess
      properties:
        plate_decoder: license_plate_decoder

    #RTC stream tracks
    vidstream_main:
      type: RTCStreamTrack

  #Management web server. Uncomment to enable
  management:
    app_name: VHawk
    
  #Admin backend (unfinished). Uncomment to enable
  admin:
    
  #Integrated model server (run along with main app on startup). Uncomment to enable
  #integrated_model_server:
    

##### Logging configuration #####
logger:
  version: 1
  disable_existing_loggers: false
  root:
    level: INFO
    handlers:
      #- log_file
      - console
  handlers:
    log_file:
      class: logging.handlers.RotatingFileHandler
      level: INFO
      formatter: preciselog
      filename: vehiclebot.log
      maxBytes: 10485760
      backupCount: 3
    console:
      class: logging.StreamHandler
      formatter: colorful
      level: DEBUG
      stream: ext://sys.stdout
  formatters:
    preciselog:
      format: '%(asctime)s [%(levelname)s] [%(name)s] (%(filename)s:%(lineno)d) %(message)s'
      datefmt: '%Y-%m-%d %H:%M:%S'
    colorful:
      (): vehiclebot.log.ColorfulFormatter
      apply_color_sequence: true
