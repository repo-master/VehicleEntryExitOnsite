#Application configuration
app:
  #Config for customer requirements
  customer:
    #Information of the parking site (to associate data with). site_key is the password to authenticate
    site_id: !env SITE_ID    #Load id from environment variable
    site_key: !env SITE_KEY  #Load key from environment variable
    
    #All connected cameras
    cameras:
      - camera1: &primary_camera
          #Which camera device to use (index or url for ip camera)
          src: 0
          skip_frames: 0

  api:
    api_base: http://localhost:5000/
    ws_base: ws://localhost:5000/

  #Task configuration
  tasks:
    camera_source:
      type: CameraSource
      properties:
        <<: *primary_camera
        video_output: videodisplay
    vehicle_detector:
      type: VehicleDetector
      properties:
        input_source: camera_source
        video_output: videodisplay
        output_result: dump_file
        detector:
          model: "models/vehicles.zip"
          detection_period: 1.0
        tracker:
          # Check out the motrackers library to find out which trackers are supported
          type: SORT
          max_lost: 8
          iou_threshold: 0.6
        output:
          image_format: .png
    dump_file:
      type: DirectoryProcess
      properties:
        ### Properties applicable to DirectoryProcess
        
        #dir - Absolute/Relative path to save results to
        # The results are saved as a .json file for each detection, and can contain additional files depending
        # on the mode selected
        dir: "results/"

        #save_mode - How to save result images:
        #  "file" - Image will be saved separate from the json file, with a "file" property pointing to it
        #  "embedded" - Image data will be base64-encoded and written within the json file in the "blob" property
        save_mode: embedded
    
    #Show video windows to display what is happening
    videodisplay:
      type: VideoDisplay

  #Management web server
  management:
    

#Logging configuration
logger:
  version: 1
  root:
    level: INFO
    handlers:
      #- log_file
      - console
  handlers:
    log_file:
      class: logging.handlers.RotatingFileHandler
      level: INFO
      formatter: preciselog
      filename: vehiclebot.log
      maxBytes: 10485760
      backupCount: 3
    console:
      class: logging.StreamHandler
      formatter: colorful
      level: DEBUG
      stream: ext://sys.stdout
  formatters:
    preciselog:
      format: '%(asctime)s [%(levelname)s] [%(name)s] (%(filename)s:%(lineno)d) %(message)s'
      datefmt: '%Y-%m-%d %H:%M:%S'
    colorful:
      (): vehiclebot.log.ColorfulFormatter
      apply_color_sequence: true
